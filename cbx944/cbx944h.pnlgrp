.*-----------------------------------------------------------------------**
.*
.*  Compile options:
.*
.*    CrtPnlGrp PnlGrp( CBX944H )
.*              SrcFile( QPNLSRC )
.*              SrcMbr( CBX944H )
.*
.*-----------------------------------------------------------------------**
:PNLGRP.
:IMPORT PNLGRP='QHWTCMD' NAME='ENDJOB/DELAY'.
:HELP NAME='PRCOBJLCK'.Process Object Locks - Help
:P.
The Process Object Locks (PRCOBJLCK) command identifies all jobs currently
holding a lock for the specified object, and for each job either sends
a break message or ends the job.  The break message is sent to the job
holding the lock or optionally to all jobs currently running under the
user profile of the job holding the lock.
:P.
:HP2.Restriction&COLON.:EHP2. Special authority *JOBCTL is required
to run this command.
:P.
:EHELP.
:HELP NAME='PRCOBJLCK/OBJ'.Object (OBJ) - Help
:XH3.Object (OBJ)
:P.
Specifies the name of the object that will have it's current lock
holders identified.
:P.
This is a required parameter.
:P.
:XH3.Library
:P.
The name of the object can be qualified by one of the following library
values:
:P.
:PARML.
:PT.:PK DEF.*LIBL:EPK.
:PD.
All libraries in the thread's library list are searched until a match
is found.
:PT.:PK.*CURLIB:EPK.
:PD.
The current library for the thread is searched.  If no library
is specified as the current library for the thread, the QGPL
library is used.
:PT.:PV.library-name:EPV.
:PD.
Specify the name of the library containing the object.
:EPARML.
:EHELP.
:HELP NAME='PRCOBJLCK/OBJTYPE'.Object type (OBJTYPE) - Help
:XH3.Object type (OBJTYPE)
:P.
The type of object that will have it's current lock holders identified.
:P.
This is a required parameter.
:P.
For a list of possible object types, positione the cursor on the field
for the :HP2.Object type :EHP2.prompt (OBJTYPE parameter), and press
the F4 key.
:P.
:EHELP.
:HELP NAME='PRCOBJLCK/ACTION'.Action to perform (ACTION) - Help
:XH3.Action to perform (ACTION)
:P.
Defines what action should be taken against all the jobs currently
holding a lock for the specified object.
:P.
The possible values are:
:P.
:PARML.
:PT.:PK DEF.*BRKMSG:EPK.
:PD.
Send a break message to the job holding the lock.  The break message
text is specified in the :HP2.Message text:EHP2. prompt (MSG parameter).
:P.
Optionally the message can be sent to all jobs currently running under
the user profile of the lock holding job.  Use the :HP2.Send message to
:EHP2.prompt (MSGTO parameter) to specify where to send the break
message.
:PT.:PK.*ENDJOB:EPK.
:PD.
The :HP2.ENDJOB:EHP2. command is issued against all jobs holding a lock
for the specified object.
:P.
Specify how the identified jobs should be ended using the :HP2.How
to end:EHP2. prompt (ENDOPT parameter) in conjunction with the
:HP2.Delay time:EHP2. prompt (DELAY parameter).
:P.
:EPARML.
:EHELP.
:HELP NAME='PRCOBJLCK/MSG'.Message text (MSG) - Help
:XH3.Message text (MSG)
:P.
Specify the message text to be sent to the identified jobs or user
profiles.
:P.
:EHELP.
:HELP NAME='PRCOBJLCK/MSGTO'.Send message to (MSGTO) - Help
:XH3.Send message to (MSGTO)
:P.
This parameter identifies whether the break message should be sent to
the job holding the lock only, or all jobs currently run by user
profile of the lock holding job.
:P.
The possible values are:
:P.
:PARML.
:PT.:PK DEF.*JOB:EPK.
:PD.
The break message is sent to the job holding the lock.
:PT.:PK.*USER:EPK.
:PD.
The break message is sent to all jobs run by the user profile of the
lock holding job.
:EPARML.
:EHELP.
:HELP NAME='PRCOBJLCK/ENDOPT'.How to end (ENDOPT) - Help
:XH3.How to end (ENDOPT)
:P.
Specifies whether the job ends immediately or in a controlled manner
that lets the application program perform end-of-job processing.  In
either case, the system performs certain job cleanup processing.
:P.
The possible values are:
:P.
:PARML.
:PT.:PK DEF.*CNTRLD:EPK.
:PD.
The job ends in a controlled manner.  This allows the program
running to perform cleanup (end-of-job processing).  The
application has the amount of time specified on the DELAY
parameter to complete cleanup before the job is ended.
:PT.:PK.*IMMED:EPK.
:PD.
The job ends immediately and the system performs end-of-job
cleanup.  System cleanup can take from a brief amount of time to
several minutes.  The program that is running is not allowed to
perform any cleanup.
:P.
:NT.
This option might cause undesirable results if data has been
partially updated; therefore, it should be used only after a
controlled end has been attempted unsuccessfully.
:ENT.
:EPARML.
:EHELP.
:HELP NAME='PRCOBJLCK/DELAY'.Delay time, if *CNTRLD (DELAY) - Help
:P.
:IMHELP NAME='ENDJOB/DELAY'.
:EHELP.
:HELP NAME='PRCOBJLCK/IGNRCDLCK'.Ignore record lock (IGNRCDLCK) - Help
:XH3.Ignore record lock (IGNRCDLCK)
:P.
If action *ENDJOB is specified, this parameter defines whether all lock
holding jobs should be checked to ensure that none of the jobs being
ended are currently holding a record lock for a file located in a
library of type *PROD.
:P.
The possible values are:
:P.
:PARML.
:PT.:PK DEF.*NO:EPK.
:PD.
Run the ENDJOB command regardless of record lock(s) for files in
production libraries.
:PT.:PK.*YES:EPK.
:PD.
Do not run the ENDJOB command if the job holding the lock is also
holding one or more record locks for files in production libraries.
:P.
:NT.
If an ENDJOB command is skipped, an informational message is issued,
identifying the job as well as the file and the relative record
number that prevented the ENDJOB command from being run.
:ENT.
:EPARML.
:EHELP.
:EPNLGRP.
